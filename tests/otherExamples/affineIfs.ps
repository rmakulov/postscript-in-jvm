%!PS-Adobe-2.0
%%Creator: Chris Foster (vim)
%%Title: affineIfs.ps
%%Pages: 1
%%BoundingBox: 0 0 596 842
%%Orientation: Landscape
%%EndComments

%-------------------------------------------------------------------------------
% An affine iterated function system (IFS) fractal generator in postscript.
%
% * To add a trasformation to the IFS, use
%    transMatrix rgbcol addTransform
%
% * There's also a 'makeTransform' function which eases the creation of arbitrary
%    affine transformations (check out the docs in the fxn header)
%
% * It's possible to *design* a fractal shape using IFS... See the Collage 
%   theorem in 'Fractals Everywhere' by Michael Barnsley
%
% Author:  Chris Foster

%-------------------------------------------------------------------------------
% data structures:
% * Affine Transform:
%   [transMatrix rgbcol]
%   where transMatrix = [a c b d e f] is an affine trans stored in the standard
%   postscript order so that
%           x' = [a b]*x  +  [e]
%                [c d]    +  [f]
%   and rgbcol = [R G B] is a RGB triplet.

%-------------------------------------------------------------------------------
% scale all units to centimeters, put the origin in the center
28.346 28.346 scale
10.5 14.85 translate
% rotate for landscape
-90 rotate

% User-modifiable stuff:
/iterations 500000 def % number of iterations
/colFadeSpeed 0.5 def % rate of colour replacment
/usingColour true def % are we using colours??
% other globals
/RandMax 2147483647 def % maximum value for the random number generator
/RandMaxOnNumTrans -1 def
/transformArray [] def % array to hold the affine transforms
/colFadeSpeed1m 1 colFadeSpeed sub def

%*******************************************************************************
% debug functions
%-------------------------------------------------------------------------------
/printStack {
  count dup 1 add copy { == } repeat pop
} def

%*******************************************************************************
% functions
%-------------------------------------------------------------------------------
% draw a small filled circle,
% in stack: x y - coordinates of center
/drawDot {0.002 0 360 arc fill} def

%-------------------------------------------------------------------------------
% function: addTransform
% purpose: Adds an affine transformation to the transform array
% input: newTrans colour
%        newTrans - ghostscript transform matrix = [a b c d e f]
%        colour - RGB colour associated with this transformation
/addTransform {
  usingColour
  { 2 array astore } % create transform structure
  { count 2 ge {pop} if } % discard colour if it seems to be there
  ifelse
  transformArray aload length 1 add %..., new, tA_1, ..., tA_n, n+1
  dup 1 add -1 roll %..., tA_1, ..., tA_n, n+1, new
  exch array astore
  /transformArray exch def % store new transform array
  % calculate RandMax/NumberOfTrans
  transformArray length RandMax exch idiv /RandMaxOnNumTrans exch def
} def

%-------------------------------------------------------------------------------
% function: makeTransform
% purpose: Creates a standard postscript transformation matrix from an easy to
%          specify form.
% input: transSpec - transform spec = [[x1 y1] [x2 y2] [x3 y3] [u1 v1] [u2 v2] [u3 v3]]
%                    where [xi yi] -> [ui vi] under the desired trasnformation
% output: affine transformation matrix in standard postscript form
/makeTransform {
  % now construct postscript transform array from given points
  /vsub { % z1 z2
    aload pop
    3 -1 roll aload pop %x2 y2 x1 y1
    3 -1 roll sub % x2 x1 y1-y2
    3 1 roll exch sub % y1-y2 x1-x2
    exch 2 array astore
  } def
  /makeDiffMat { % z1 z2 z3
    dup 3 1 roll vsub % z1 z3 z2-z3
    3 1 roll vsub % z2-z3 z1-z3
    aload pop 3 -1 roll aload pop 
    0 0 6 array astore % produces [z1-z3 | z2-z3] as postscript transform matrix
  } def
  aload 7 1 roll % keep array for later
  makeDiffMat 4 1 roll
  makeDiffMat matrix invertmatrix %diffMatUV diffMatXY^-1
  exch matrix concatmatrix /linearPart exch def
  aload pop pop pop 3 1 roll pop pop % xy1 uv1
  exch aload pop linearPart transform 2 array astore vsub % uv1 - A*xy1
  aload pop matrix translate linearPart exch matrix concatmatrix
} def

%-------------------------------------------------------------------------------
% function: calcNewColour
% purpose: calculates a new colour based on the previous and a new input
% input: R0 G0 B0 R1 G1 B1
% output: RGB1*colFadeSpeed + RGB0*(1-colFadeSpeed)  (an rgb triplet of course)
/calcNewColour {
  colFadeSpeed mul 3 1 roll
  colFadeSpeed mul 3 1 roll
  colFadeSpeed mul 3 1 roll
  6 3 roll 
  colFadeSpeed1m mul 3 1 roll
  colFadeSpeed1m mul 3 1 roll
  colFadeSpeed1m mul 3 1 roll
  4 -1 roll add % R1 G1 R0 G0 B0+B1
  exch 4 -1 roll add % R1 R0 B0+B1 G0+G1
  4 -2 roll add % B0+B1 G0+G1 R1+R0
  exch 3 -1 roll
} bind def

%-------------------------------------------------------------------------------
% function: drawIfsMonochrome
% purpose: monte-carlo fractal drawing algorithm, black & white version
% input: x0 y0 N 
%   x0 y0 - starting point
%   N     - number of iterations
/drawIfsMonochrome {
  {
    rand RandMaxOnNumTrans idiv % get a transform number at random
    transformArray exch get %..., xn yn [matrix]
    transform
    2 copy drawDot % display the position of the result
  } repeat
} bind def

%-------------------------------------------------------------------------------
% function: drawIfs
% purpose: monte-carlo fractal drawing algorithm, colour version
% input: x0 y0 N 
%   x0 y0 - starting point
%   N     - number of iterations
/drawIfs {
  usingColour
  {
    0 0 0 6 3 roll % input initial colour
    {
      rand RandMaxOnNumTrans idiv % get a transform number at random
      transformArray exch get aload pop %..., Rn Gn Bn xn yn [matrix] [RGB] 
      4 1 roll transform
      % calculate the new colour
      6 -4 roll aload pop % ..., x(n+1) y(n+1) Rn Gn Bn R G B
      calcNewColour 3 copy 8 3 roll setrgbcolor
      2 copy drawDot % display the position of the result
    } repeat
  }
  {
    drawIfsMonochrome 
  }
  ifelse
  pop pop
} bind def

%*******************************************************************************
% Definition of transforms...
%-------------------------------------------------------------------------------

%/iterations 2000000 def % number of iterations
/iterations 1000000 def % number of iterations
/colFadeSpeed 0.5 def % rate of colour replacment
/usingColour true def % are we using colours??

% Here's some possible map sets to try...

%[ [0 0] [1 0] [0 1] [0 0] [0.5 0.5] [-0.5 0.5] ] addTransformEasy
%[ [0 0] [1 0] [0 1] [0.5 0.5] [1 0] [1 1] ] addTransformEasy

/writePain {
  % PAIN - a PAIN shaped fractal for the amusement of the UQ physics society...

  /usingColour false def
  % Transform for A4 sized:
  -2.5 -2.5 scale
  -5.5 -2 translate

  % Transforms for letters which fill the page:
  %90 rotate
  %5.5 5.5 scale
  %-4 0 translate % P
  %-1 0 translate % A
  %1.5 0 translate % I
  %4 0 translate % N
  %5.5 2 translate
  %-1 -1 scale

  % Letters:
  %P
  [ [0 0] [11 0] [0 4] [1 0] [1 4] [0 0] ] makeTransform addTransform
  [ [0 0] [11 0] [0 4] [0 3.2] [3 2.7] [0 4] ] makeTransform addTransform
  [ [0 0] [11 0] [0 4] [1 1] [3 2.4] [1 2] ] makeTransform addTransform
  %A
  [ [0 0] [11 0] [0 4] [3.7 0] [5 4] [2.7 0] ] makeTransform addTransform
  [ [0 0] [11 0] [0 4] [3.2 1] [5.6 1] [3.3 1.6] ] makeTransform addTransform
  [ [0 0] [11 0] [0 4] [4 4] [5.3 0] [5 4] ] makeTransform addTransform
  %I
  [ [0 0] [11 0] [0 4] [7.5 0] [7.5 4] [6.7 0] ] makeTransform addTransform
  %N
  [ [0 0] [11 0] [0 4] [8.9 0] [8.9 4] [8 0] ] makeTransform addTransform
  [ [0 0] [11 0] [0 4] [8 4] [10 0] [9 4] ] makeTransform addTransform
  [ [0 0] [11 0] [0 4] [10.1 0] [10.1 4] [11 0] ] makeTransform addTransform
} def

%writePain

/writeGeek {
  % Transformations for a GEEK-shaped fractal

  /usingColour false def

  % Transform for A4 sized:
  -2.0 dup scale
  -6.8 -2 translate

  % Letters:
  % G
  [ [0 0] [13.5 0] [0 4]  [1 0] [1 4] [0 0] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [1 3] [3 3] [1 4] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [1 0] [3 0] [1 1] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [3 1] [3 2] [2 1] ] makeTransform addTransform
  % E
  [ [0 0] [13.5 0] [0 4]  [4.5 0] [4.5 4] [3.5 0] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [4.5 0] [6.5 0] [4.5 1] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [4.5 1.5] [5.5 1.5] [4.5 2.5] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [4.5 3] [6.5 3] [4.5 4] ] makeTransform addTransform
  % E
  [ [0 0] [13.5 0] [0 4]  [8 0] [8 4] [7 0] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [8 0] [10 0] [8 1] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [9 2.5] [8 2.5] [9 1.5] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [8 3] [10 3] [8 4] ] makeTransform addTransform
  % K
  [ [0 0] [13.5 0] [0 4]  [11.5 0] [11.5 4] [10.5 0] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [11.2 1.5] [13.5 3.2] [10.6 2.3] ] makeTransform addTransform
  [ [0 0] [13.5 0] [0 4]  [11.4 1.6] [12.9 0] [12.1 2.2] ] makeTransform addTransform
} def

writeGeek

% Pretty pictures - uncomment one of the following groups of lines to get something interesting...
%1.8 dup scale
%[0.8 0.3 0.1 -0.7 1 1] [0.7 0 0] addTransform
%[0 1 1 0 0 0] [0 0 0.7] addTransform

%[0.8 0.3 0.1 -0.7 1 1] [0.7 0 0] addTransform
%[0 1 1 0 0 0] [0 0.7 0] addTransform
%[-1.1 0 0.5 -0.1 -0.2 -0.5] [0 0 0.7] addTransform

%[0 -1 1 0 0.1 1] [0.7 0 0] addTransform
%[0.4 0.1 0 -1 0 -1] [0 0 0.7] addTransform

%6 6 scale
%[0.5 -0.5 0.5 0.5 -1 0] [0.7 0 0] addTransform
%[0.5 0.5 -0.5 0.5 1 0] [0 0.7 0] addTransform

%[0.5 -0.5 0.5 0.5 -1 0] [0.7 0 0] addTransform
%[-0.5 -0.5 0.5 -0.5 1 0] [0 0 0.7] addTransform

%[] [0 0 0.7] addTransform

0 0 iterations drawIfs
showpage
