%!PS-Adobe-2.0
%%Creator: Chris Foster (vim)
%%Title: psRay.ps
%%Pages: 1
%%BoundingBox: 0 0 596 842
%%Orientation: Landscape
%%EndComments

%*******************************************************************************
% $Id: psRay.ps,v 0.3 2004/08/15 14:31:06 foster Exp $
%-------------------------------------------------------------------------------

%*******************************************************************************
% Raytracer written entirely in postscript (!!)
% The person who was strange enough to do this: Chris Foster
%   [foster (at) physics.uq.edu.au]
%
%-------------------------------------------------------------------------------
% Scene description:
%
% * To add objects:
%   Spheres:    center radius attributes addSphere
%   Planes:     point_on_plane normal attributes addPlane
%
% * Object attribute format:
%   attributes = [attribute1 value1 attribute2 value2 ...]
%   attributes currently supported: (colour) (ambient) (reflection) 
%     { all should be between 0 and 1 }
%
% * Add a light source:
%     (parallel) direction intensity addLight
%     TODO: (point) position intensity addLight (NOTE: not supported yet...)
%
% * Set the camera:
%     position look_at angle setCamera
%
% * Set the background:
%     colour setBackground
%
% * Set the x-resolution:
%     new_resolution setResolution
%
% * Set the device gamma (eg, you might use 2.5 for dark printers...)
%     device_gamma setDeviceGamma
%
%
% Of course, all the standard postscript operators may be used (looping
% constructs etc) so there is actually a full (if slightly unorthodox :)
% language at your command...
%
%
%-------------------------------------------------------------------------------
% Data structures:
%
% Basic
%   * vector = [ x1, x2, x3 ]
%   * Ray = [i, P, D ]; int i = originating object index, 
%                       vector P = ray origin,  vector D = ray direction
%   * Intersection = [I, N, index]; vector I = intersection point, 
%                      vector N = normal, int index = objectArray index
%
% Geometry
%   * Sphere = [ (sphere), P, r, <attributes> ]; vector P = center, r = radius
%   * Plane = [ (plane), P, N, <attributes> ]; vector P = point on plane, 
%               vector N = normal
%   * HeightField = [ (heightField), [dim1 dim2], [boundingbox], [heightdata],
%                    [normals] ]
%               dim1, dim2 = dimensions of the heightfield
%               boundingbox = [P A B C] bounds the heightfield
%                             P = coords of corner
%                             A,B = baseline vectors
%                             C = height vector
%               heightdata = [ [h(1,1)    h(2,1) ... h(dim1,1)   ]
%                              ...
%                              [h(1,dim2) ...        h(dim1,dim2)] ]
%               normals = [ [N(1,1) N(1,1)' ... N(dim1-1,1) N(dim1-1,1)']
%                           ...
%                           [N(1,dim2-1) N(1,dim2-1)' ... N(dim1-1,dim2-1)'] ]
%                         (there are two triangle normals per square)
%
%
% Other scene objects
%   * Light source = [ (parallel) D intensity ]; vector D = direction of propogation
%                    [ (point) P intensity];  vector P = position
%   * Camera = [ P D R U ]; (all vectors) P = position, D = direction, 
%                 R = right, U = up
%
% Surface attributes
%   <attributes> = [surfaceColour reflectionAmount]; the visual attributes
%

%-------------------------------------------------------------------------------
% Notes: for png conversion, use
%%!PS-Adobe-2.0 EPSF-2.0
% 

%-------------------------------------------------------------------------------
% Viewport transformations
%-------------------------------------------------------------------------------
% put us into centimeters.
28.346 28.346 scale
% put the origin in the center (A4)
10.5 14.85 translate


%-------------------------------------------------------------------------------
% Global variables
%-------------------------------------------------------------------------------
% define the viewport; use ghostscript's inbuilt scaling to do this
% automatically: the program will write pixels into the box defined by 
% (0,0) to (1,1)
/viewWidth 4 def
/viewHeight 3 def
90 rotate 5 5 scale % landscape
%3 3 scale % scaled larger
viewWidth -2 div viewHeight -2 div translate
viewWidth viewHeight scale

% create object arrays
/lightArray [] def
/objectArray [] def

% amount considered to be 'small' used to avoid surface degeneracies when tracing
/degenAvoidDist 0.00005 def
% maximum value for the random number generator
/RandMax 2147483647 def

% constants to index the attributes array
/attribColourIndex 0 def
/attribReflectionIndex 1 def
/attribAmbientIndex 2 def
/attributeNumber 3 def

%*******************************************************************************
% debug functions
%-------------------------------------------------------------------------------
/printStack {
  (top) ==
  count dup 1 add copy { == } repeat pop
  (bottom) ==
} def

%*******************************************************************************
% vector / matrix functions
%-------------------------------------------------------------------------------
% function: vadd
% purpose: add two vectors
% input: A B - vectors
% output: A+B - vector
/vadd {
  aload pop 4 -1 roll aload pop %..., b1 b2 b3 a1 a2 a3
  4 -1 roll add % b1 b2 a1 a2 a3+b3
  exch 4 -1 roll add % b1 a1 a3+b3 a2+b2
  4 -2 roll add % a3+b3 a2+b2 b1+a1
  exch 3 -1 roll
  3 array astore
} bind def

%-------------------------------------------------------------------------------
% function: vsub
% purpose: add two vectors
% input: A B - vectors
% output: A-B - vector
/vsub {
  aload pop 4 -1 roll aload pop %..., b1 b2 b3 a1 a2 a3
  4 -1 roll sub % b1 b2 a1 a2 a3-b3
  exch 4 -1 roll sub % b1 a1 a3-b3 a2-b2
  4 -2 roll exch sub % a3-b3 a2-b2 a1-b1
  exch 3 -1 roll
  3 array astore
} bind def

%-------------------------------------------------------------------------------
% function: vneg
% purpose: negate a vector
% input: V
% output: -V
/vneg {
  aload pop neg 3 1 roll neg 3 1 roll neg 3 1 roll 3 array astore
} bind def

%-------------------------------------------------------------------------------
% function: svmul
% purpose: scaler-vector multiply
% input: s V - scaler, vector
% output: s*V
/svmul {
  exch dup dup 4 -1 roll aload pop %..., s s s V1 V2 V3
  4 -1 roll mul % s s V1 V2 s*V3
  exch 4 -1 roll mul % s V1 s*V3 s*V2
  4 -2 roll mul % s*V3 s*V2 s*V1
  exch 3 -1 roll
  3 array astore
} bind def

%-------------------------------------------------------------------------------
% function: vdot
% purpose: gets the dot product of two vectors
% input: A B two vectors = 3D arrays
% output: dot product A.B
/vdot {
  aload pop 4 -1 roll aload pop %..., b1 b2 b3 a1 a2 a3
  4 -1 roll mul % b1 b2 a1 a2 a3*b3
  exch 4 -1 roll mul % b1 a1 a3*b3 a2*b2
  4 -2 roll mul % a3*b3 a2*b2 b1*a1
  add add
} bind def

%-------------------------------------------------------------------------------
% function: vcross
% purpose: gets the cross product of two vectors
% input: A B two vectors = 3D arrays
% output: cross product A x B
/vcross {
  aload pop 4 -1 roll aload pop 6 copy 6 copy %..., (b1 b2 b3 a1 a2 a3)x3
  % compute first componenet
  3 -1 roll pop 5 -1 roll pop %..., b2 b3 a2 a3
  4 -1 roll mul %..., b3 a2 a3*b2
  3 1 roll mul exch sub %..., b3*a2-a3*b2
  13 1 roll
  % compute second componenet
  exch pop 4 -1 roll pop %..., b1 b3 a1 a3
  4 -1 roll mul %..., b3 a1 a3*b1
  3 1 roll mul sub %..., a3*b1-b3*a1
  7 1 roll
  % compute third component
  pop 3 -1 roll pop %..., b1 b2 a1 a2
  4 -1 roll mul %..., b2 a1 a2*b1
  3 1 roll mul exch sub %..., b2*a1-a2*b1
  3 array astore
} bind def

%-------------------------------------------------------------------------------
% function: vnormalise
% purpose: normalises a vector
% input: V - a vector
% output: V/|V|
/vnormalise {
  dup dup vdot sqrt
  1 exch div exch svmul
} bind def


%*******************************************************************************
% Root solver functions
%-------------------------------------------------------------------------------
% function: polySolve2
% purpose: solve quadratic equations
% input: a2 a1 a0  - coefficients as in a2*x^2 + a1*x + a0
% output: t success
%   t - the smallest positive solution - only output if it's real
%   success - boolean indicating if the solutions are real and > 0
/polySolve2{
  3 copy
  exch dup mul % a2 a1 a0 a2 a0 a1^2 
  3 1 roll 4 mul mul sub % a2 a1 a0 det
  exch pop 
  dup 0 lt % a2 a1 det det<0
  {
    % roots are complex
    pop pop pop false
  }
  {
    % roots are real
    sqrt exch neg exch 2 copy add 3 1 roll sub % a2  -a1+sqrt(det)  -a1-sqrt(det)
    dup 0 le
    {
      % first root is <= 0
      pop
      dup 0 le
      {
        % both roots are <= 0
        pop pop false
      }
      {
        % one root is > 0
        exch 2 mul div true
      }
      ifelse
    }
    {
      % both roots are > 0
      exch pop
      exch 2 mul div true
    }
    ifelse
  }
  ifelse
} def

%*******************************************************************************
% ray manupulation functions
%-------------------------------------------------------------------------------
% function: moveAlongRay
% purpose: propogate along a ray R(t) = P + D*t by amount t.
% input: [i P D] t 
%   [i P D] - the ray in question
%   t      - the position on the ray to evaluate at.
% output: R(t)
/moveAlongRay {
  exch aload pop 3 -1 roll pop % discard originating-object index ... t P D
  3 -1 roll exch svmul vadd
} bind def

%-------------------------------------------------------------------------------
% function makeRay{
% purpose: make a ray structure, making sure the direction is normalised
% input: i P D
% output [i P D']  where D' = D/|D|
/makeRay {
  vnormalise 3 array astore
} bind def

%*******************************************************************************
% Functions for initialising scene objects
%-------------------------------------------------------------------------------
% function: addToObjectArray
% purpose: adds the object on top of the stack to the end of the object array
% input: new_object
/addToObjectArray {
  objectArray aload length 1 add %..., new, oA_1, ..., oA_n, n+1
  dup 1 add -1 roll %..., oA_1, ..., oA_n, n+1, new
  exch array astore
  /objectArray exch def
} def

%-------------------------------------------------------------------------------
% function: parseAttributes
% purpose: parse an array of object attributes
% input: [key1 value1 key2 value2 ...]
% output: [attribute1 attribute2 ...]
/parseAttributes {
  /attribArray exch def
  /attributes [1 0 0] def % default values
  0 2 attribArray length 2 sub
  {
    dup 1 add exch % n+1, n
    attribArray exch get
    exch attribArray exch get exch %..., value key
    % find the index for this attribute key
    /attribIndex -1 def
    dup (colour) eq
    { /attribIndex attribColourIndex def pop }
    {
      dup (reflection) eq
      { /attribIndex attribReflectionIndex def pop }
      {
        dup (ambient) eq
        { /attribIndex attribAmbientIndex def pop }
        { (Warning - attribute ignored:) == == == /attribIndex -1 def }
        ifelse
      }
      ifelse
    }
    ifelse
    attribIndex 0 ge
    {
      % put in the new attribute
      attributes attribIndex 3 -1 roll put
    }
    if
  }
  for
  attributes
} def

%-------------------------------------------------------------------------------
% function: addSphere
% purpose: constructs a sphere structure & adds it to the object array
% input: P r [key attribute, ...]
%   P - position of center
%   r - radius
%   key attribute pairs
/addSphere {
  parseAttributes (sphere) exch 4 2 roll
  4 array astore addToObjectArray
} def

%-------------------------------------------------------------------------------
% function: addPlane
% purpose: construct a plane object & add it to the object array
% input: P N [key attribute, ...]
%   P - position of a point on the plane
%   N - normal to plane
%   key attribute pairs
/addPlane {
  parseAttributes (plane) exch 4 2 roll
  4 array astore addToObjectArray
} def

%-------------------------------------------------------------------------------
% function: addHeightField
% purpose: Construct a heightfield object & add it to the object Array
% input: [dim1 dim2] [boundingbox] [heightdata] [attributes]
/addHeightField {
  parseAttributes (heightField) exch 5 2 roll
  /heightData exch def
  /boundingBox exch def
  /dimensions exch def % ... (heightField) [attributes]
  /dA 1 dimensions 0 get 1 sub div boundingBox 1 get svmul def
  /dB 1 dimensions 1 get 1 sub div boundingBox 2 get svmul def
  /C boundingBox 3 get def
  % make blank normal array
  dimensions 1 get 1 sub {
    dimensions 0 get 1 sub 2 mul array
  } repeat
  dimensions 1 get 1 sub array astore /normals exch def
  % generate normals
  0 1 dimensions 1 get 2 sub {
    /nb exch def
    0 1 dimensions 0 get 2 sub {
      /na exch def
      /h11 heightData nb get na get def
      /h21 heightData nb get na 1 add get def
      /h12 heightData nb 1 add get na get def
      /h22 heightData nb 1 add get na 1 add get def
      % compute first triangle normal
      dA h21 h11 sub C svmul vadd  dB h12 h11 sub C svmul vadd vcross vnormalise
      normals nb get na 2 mul 3 -1 roll put
      % compute second triangle normal
      dB h22 h21 sub C svmul vadd  dA h22 h12 sub C svmul vadd vcross vnormalise
      normals nb get na 2 mul 1 add 3 -1 roll put
    } for
  } for
  % put it all together
  dimensions boundingBox heightData normals 6 array astore addToObjectArray
} def

%-------------------------------------------------------------------------------
% function: addLight
% purpose: construct a light and add it to the lights array.
% input: str V intens
%          str - specifies the type of light; it may be (point) or (parallel)
%          V - position for a point source or direction for a parallel source
%          intens - intensity
/addLight {
  3 -1 roll dup (parallel) eq
  {
    % (parallel) lights: it turns out to be more useful to store -V
    3 -1 roll vnormalise vneg 3 -1 roll
  }
  {
    % (point) lights
    3 1 roll
  }
  ifelse
  3 array astore % create the light structure
  % add to lights array
  lightArray aload length 1 add %..., new, lA_1, ..., lA_n, n+1
  dup 1 add -1 roll %..., lA_1, ..., lA_n, n+1, new
  exch array astore
  /lightArray exch def
} def

%-------------------------------------------------------------------------------
% function: setCamera
% purpose: construct a camera & put it in the camera variable
% input: P L angle
%   vector P - camera position
%   vector L - where the camera is looking
%   angle - angle subtended by the viewport in the vertical direction (degrees)
/setCamera {
  4 dict begin
    /angle exch def
    /lookAt exch def
    /pos exch def
    /V lookAt pos vsub vnormalise def
    pos
    angle 2 div dup cos exch sin div V svmul %the direction vector  = V*cot(angle/2)
    [0 0 1] V [0 0 1] vdot V svmul vsub vnormalise % the up vector
    dup V exch vcross viewWidth viewHeight div exch svmul % the right vector
    exch
  end
  4 array astore /camera exch def
} def

%-------------------------------------------------------------------------------
% function: setBackground
% purpose: sets the background colour
% input colour  (grayscale between 0 & 1)
/setBackground {
  /backgroundColour exch def
} def

%-------------------------------------------------------------------------------
% function: setResolution
% purpose: sets the image resolution in the x-direction
/setResolution {
  viewWidth idiv
  dup 0 le { pop 1 } if
  /resolution exch def
  /viewResX viewWidth resolution mul def
  /viewResY viewHeight resolution mul def
} def

%-------------------------------------------------------------------------------
% function: setDeviceGamma
% purpose: sets deviceGamma correction value
/setDeviceGamma {
  1 exch div /deviceGamma exch def
} def

%-------------------------------------------------------------------------------
% function: setJitterColourAmount
% purpose: sets the amount of randomisation we'd like in our output colour
/setJitterColourAmount {
  /jitterColourAmount exch def
} def

%*******************************************************************************
% Tracing functions
%-------------------------------------------------------------------------------
% function: getSphereIntersection
% purpose: get the intersection of a ray with a sphere
% input: sphere ray
% output: intersection normal distance true   - if intersection is found
%         false                               - if no intersection
/getSphereIntersection {
  2 dict begin % local vars
    /thisRay exch def
    /thisSphere exch def
    thisRay 2 get dup vdot % compute a2
    thisRay 1 get thisSphere 2 get vsub dup
    thisRay 2 get vdot 2 mul exch % compute a1
    dup vdot  thisSphere 3 get dup mul sub % compute a0
    polySolve2 % gives: (ray_param if true) (true/false)
    {
      % we have an intersection; compute its position
      dup thisRay exch moveAlongRay % calc intersection
      dup thisSphere 2 get vsub vnormalise % calc normal
      3 -1 roll
      true
    }
    {
      % no intersection found
      false
    }
    ifelse
  end
} bind def

%-------------------------------------------------------------------------------
% function: getPlaneIntersection
% purpose: get the intersection of a ray with a plane
% input: plane ray
% output: intersection normal distance true    - if intersection found
%         false                                  - if no intersection
/getPlaneIntersection {
  2 dict begin % local vars
    /thisRay exch def
    /thisPlane exch def
    thisRay 2 get thisPlane 3 get vdot % denominator
    dup 0 eq
    {
      % no intersection
      pop false
    }
    {
      % intersection; get the ray param, t
      thisPlane 2 get thisRay 1 get vsub thisPlane 3 get vdot exch div % t
      dup 0 le
      {
        % intersection is in negative ray direction
        pop
        false
      }
      {
        dup thisRay exch moveAlongRay % calc intersection point
        thisPlane 3 get % normal
        3 -1 roll
        true
      }
      ifelse
    }
    ifelse
  end
} def

%-------------------------------------------------------------------------------
% function: getObjectIntersection
% purpose: get intersection of an object with a ray
% input: objectIndex ray
% output: intersection_obj=[intersection normal objectIndex] distance true 
%                - if intersection found
%         false
%                - if no intersection
/getObjectIntersection {
  exch /thisObjectIndex exch def
  dup 0 get thisObjectIndex eq
  {
    % if we're trying to intersect with the same object which the ray spawned
    % from, move along the ray by degenAvoidDist.
    aload degenAvoidDist moveAlongRay %... i P D P'
    3 1 roll exch pop 3 array astore %... [i P' D]
  }
  if
  objectArray thisObjectIndex get % ray oA[thisObjectIndex]
  dup 0 get (sphere) eq
  {
    exch getSphereIntersection
  }
  {
    exch getPlaneIntersection
  }
  ifelse
  {
    %found an intersection
    thisObjectIndex exch
    4 1 roll 3 array astore exch
    true
  }
  {
    % no intersection
    false
  }
  ifelse
} def


%-------------------------------------------------------------------------------
% function: getNearestIntersection
% purpose: get the nearest intersection of ray against all objects
% input: ray
% output: intersection true   - if an intersection was found
%         false               - no intersection
/getNearestIntersection {
  2 dict begin
    % move along the ray just a bit 'degenAvoidDist' to avoid surface degeneracy
    /thisRay exch def
    /closestIntersectionDist 1e9 def % rubbish (+large) intersection dist
    /closestIntersection [ 0 0 -1] def % rubbish intersection
    0 1 objectArray length 1 sub
    {
      thisRay getObjectIntersection
      % this "if" is conditioned on the intersection fxn finding an intersection
      {
        % ray did intersect the shape
        dup closestIntersectionDist lt
        {
          % this intersection is closer; save it instead of the current one
          /closestIntersectionDist exch def
          /closestIntersection exch def
        }
        {
          % it's further away; ignore...
          pop pop
        }
        ifelse
      }
      if
    }
    for
    closestIntersection 2 get -1 eq
    {
      % no intersection found
      false
    }
    {
      % intersection found
      closestIntersection true
    }
    ifelse
  end
} def

%-------------------------------------------------------------------------------
% function: getDiffuseIllumination
% purpose: gets the intensity due to all light sources at a point
% input: intersection_point incident_ray
% output: an intensity value > 0
/getDiffuseIllumination {
  aload pop /rayDirec exch def pop pop
  aload pop 3 -1 roll % N index I
  /totIllum 0 def
  lightArray {
    /thisLight exch def
    % TODO : only parallel light sources at the moment !
    % check that the camera's on the same side of the normal as the light.
    3 copy pop pop dup % ... N index I N N
    rayDirec vdot exch thisLight 1 get vdot mul 0 lt
    {
      3 copy thisLight 1 get 3 array astore % make shadow ray
      getNearestIntersection
      {
        pop % we have intersection; no light reaches from this light source...
        pop % we don't need the copy of N
      }
      {
        % light is reaching the object; calculate the amount (diffuse lighting)
        thisLight 1 get vdot
        abs thisLight 2 get mul
        totIllum add /totIllum exch def
      }
      ifelse
    }
    if
  } forall
  pop pop pop
  totIllum
} bind def

%-------------------------------------------------------------------------------
% function: getReflectionColour
% purpose: gets colour from reflected rays
% input: intersection_point incident_ray
% output: a greyscale value
/getReflectionColour {
  %... [I N index] [i P D]
  aload pop 3 1 roll pop pop exch aload pop %... D I N index
  4 1 roll 3 -1 roll %... index I N D
  2 copy vdot 2 mul %... index I N D 2*N.D
  3 -1 roll svmul vsub %... index I D-2*(N.D)N
  3 array astore
  getRayColour
} bind def

%-------------------------------------------------------------------------------
% function: getRayColour
% purpose: gets the colour of a ray
% input: ray
% output: grayscale value between 0 and 1
/getRayColour {
  2 dict begin
    dup getNearestIntersection
    {
      % we have an intersection; get the colour of the intersection
      % = surface colour + reflected + transmitted light colours
      % get reflected light
      /intersectionColour 0 def %... ray intersection
      dup 2 get objectArray exch get 1 get /currentAttributes exch def
      exch %... intersection ray
      currentAttributes attribReflectionIndex get 0 gt
      {
        2 copy
        getReflectionColour
        currentAttributes attribReflectionIndex get mul % amount of reflection
        /intersectionColour exch def
      }
      if
      % get total diffuse lighting (total diffuse = diffuse direct + ambient)
      currentAttributes attribColourIndex get 0 gt
      {
        getDiffuseIllumination
        currentAttributes attribAmbientIndex get add % object ambient level
        currentAttributes attribColourIndex get mul % object colour
        intersectionColour add
      }
      {
        pop pop % don't need ray or intersection
        intersectionColour
      }
      ifelse
    }
    {
      % no intersection; get a colour from the background
      pop % don't need ray
      backgroundColour
    }
    ifelse
  end
} bind def

%-------------------------------------------------------------------------------
% function: getRayForPixel
% purpose: gets the ray which should be shot from a particular pixel
% input: ix iy  - pixel to shoot from
% output: ray structure for this pixel
/getRayForPixel{
  2 mul 1 add viewResY div 1 sub camera 3 get svmul
  exch
  2 mul 1 add viewResX div 1 sub camera 2 get svmul
  camera 0 get camera 1 get
  vadd vadd vadd % this yeilds the direction from viewer to pixel in viewplane
  -1 exch camera 0 get exch makeRay % -1 since ray doesn't come from an obj.
} def

%-------------------------------------------------------------------------------
% function: drawPixel
% purpose: draws a pixel
% inputs: i j col
%   i,j - position of the pixel measured from the bottom left
/drawPixel {
  deviceGamma exp % perform gamma correction
  jitterColourAmount 0 gt
  {
    % jitter the output colour to avoid printer dithering artefacts
    rand RandMax div 2 mul 1 sub jitterColourAmount mul add
  } if
  setgray % set the pixel colour
  /pixelWidth 1 viewResX div def
  /pixelHeight 1 viewResY div def
  viewResY div /pixelBottom exch def
  viewResX div /pixelLeft exch def
  newpath % create a (in general rectangular) pixel & fill
  pixelLeft pixelBottom moveto
  pixelLeft pixelWidth add pixelBottom lineto
  pixelLeft pixelWidth add pixelBottom pixelHeight add lineto
  pixelLeft pixelBottom pixelHeight add lineto
  closepath
  fill
} def

%-------------------------------------------------------------------------------
% function: performTrace
% purpose: master tracing function - shoot a ray through each pixel
/performTrace {
  0 1 viewResY 1 sub {
    /ny exch def % ny contains y-counter
    0 1 viewResX 1 sub {
      /nx exch def % nx contains x-counter
      nx ny 2 copy
      getRayForPixel getRayColour
      drawPixel
    } for
  } for
  0.002 0 outlineViewport
} def

%*******************************************************************************
% display stuff
%-------------------------------------------------------------------------------
% function: outlineViewport
% purpose: outline the viewport
% input: linewidth colour
/outlineViewport {
  setgray
  setlinewidth
  newpath
  0 0 moveto
  0 1 lineto
  1 1 lineto
  1 0 lineto
  closepath
  stroke
  showpage
} def


%*******************************************************************************
% scene defaults
%-------------------------------------------------------------------------------
[0 0 0] [1 0 0] 30 setCamera
0.5 setBackground
50 setResolution
1 setDeviceGamma
0 setJitterColourAmount 

%*******************************************************************************
% scene description
%-------------------------------------------------------------------------------

200 setResolution
%2.5 setDeviceGamma
%0.005 setJitterColourAmount


[1 1 0.4] [0 0 0] 30 setCamera
0.8 setBackground
(parallel) [0.4 -1 -1] 1 addLight

/axes {
  -1 0.2 1 {
    0 0 3 array astore 0.07 [] addSphere
  } for
  -1 0.2 1 {
    0 exch 0 3 array astore 0.07 [] addSphere
  } for
  -1 0.2 1 {
    0 0 3 -1 roll 3 array astore 0.07 [] addSphere
  } for
} def

/ring {
  /ringRad 0.8 def
  0 20 360 {
    dup cos exch sin ringRad mul exch ringRad mul 0 3 array astore 0.06 
      [(colour) 0.8] addSphere
  } for
} def

%axes
[0 0 0.1] 0.4 [(colour) 0 (ambient) 0 (reflection) 0.8] addSphere
ring
[0 0 0] [0 0 1] [(colour) 0.4] addPlane

%-------------------------------------------------------------------------------
performTrace
