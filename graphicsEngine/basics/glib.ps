(graphicsEngine/basics/libs/listLib.ps) (r) file run
(graphicsEngine/basics/libs/stringLib.ps) (r) file run
(graphicsEngine/basics/libs/figureLib.ps) (r) file run
%PROLOG

%--- args: element, void

/addElement {dup /number gelements /maxElementNumber get dup /curnumber exch def put
                gelements curnumber 3 2 roll put
                gelements /maxElementNumber curnumber 1 add put
} def
%---
(graphicsEngine/basics/primitives/button/button.ps) (r) file run
%---
(graphicsEngine/basics/primitives/labelField/labelField.ps) (r) file run
%---
(graphicsEngine/basics/primitives/toggleButton/toggleButton.ps) (r) file run
%---
(graphicsEngine/basics/primitives/comboBox/comboBox.ps) (r) file run
%---
(graphicsEngine/basics/primitives/listBox/listBox.ps) (r) file run
%---
(graphicsEngine/basics/primitives/window/window.ps) (r) file run
%---
(graphicsEngine/basics/primitives/checkBox/checkBox.ps) (r) file run
%---
(graphicsEngine/basics/primitives/textField/textField.ps) (r) file run
%---
(graphicsEngine/basics/primitives/scene/scene.ps) (r) file run


%---
/repaintAll {
      init
      scene dup /paint get exec
    } def
%---params: elementDict, void -----
/paintChildren{
    /element exch def
    element /children get length 0 ne
    {


    /children element /children get def
        {
         children length 0 eq
         {exit}
         {
            children tail
            gelements children  head get dup /paint get exec
            /children  exch def
         } ifelse
        } loop
    }
    if
} def
%--- elementDict, void -----
/moveToFront{
    /element exch def
    /parent element /parent get def
    parent null ne{
        parent dup /children get  
         element /number get moveToEnd /children exch put
    } if
} def
%--- print label of dict
/printDictLabel {
        dup /label known
        {/label get print}
        {pop}
        ifelse
    } def
%---
/invertLabels {
    0 1 gelements /maxElementNumber get 1 sub
    {
        gelements exch get
        dup /label known
           {dup /label get
            invertString
            /label exch put}
            {pop}
            ifelse
    } for
} def
%---
/getGelement {
       transform
       /pointY exch def
       /pointX exch def
       gelements /maxElementNumber get 1 sub -1 0 {
                gelements exch get
                /element exch def
                /x element /x get def
                /y element /y get def
                /w element /w get def
                /h element /h get def

                pointX x ge pointY y ge and
                x w add pointX ge y h add pointY ge and
                and
                {element exit}
                if
       } for
} def
%--- param: sleepInterval set sleep duration
/sleep
{
        /snapshot save def
        % Single arg off stack - seconds to sleep
        /sleepInterval exch def
        % Get our starting time
        usertime 1000 idiv /starttime exch def
        {
                % Seconds since start
                usertime 1000 idiv starttime sub
                % Exit if interval is exceeded
                sleepInterval ge { exit } if
        } loop
        snapshot restore
} def
%---
/milliSleep
{
        % Single arg off stack - milliseconds to sleep
        /sleepInterval exch def
        % Get our starting time
        usertime /starttime exch def
        {
                % Seconds since start
                usertime  starttime sub
                % Exit if interval is exceeded
                sleepInterval ge { exit } if
        } loop
} def
%---
% params: x y set center of circles
/wave {
    /milliSleep
    {
            % Single arg off stack - milliseconds to sleep
            /sleepInterval exch def
            % Get our starting time
            usertime /starttime exch def
            {
                    % Seconds since start
                    usertime  starttime sub
                    % Exit if interval is exceeded
                    sleepInterval ge { exit } if
            } loop
    } def
    %   transform
    /y exch def
    /x exch def
    /r 20 def
    /deltaR 10 def
    0.5 setgray

    %debug
     100 {
        x r add y moveto
        x y r 0 360 arc closepath stroke
        repaintMainContext
        50 milliSleep
        %repaintAll

        /r r deltaR add def
        %debug

     } repeat
     %repaintAll
     %100 milliSleep
     %repaintMainContext




} def

%---
% param: [a] - array
/toList{
    /arr exch def
    /len arr length
    /res null def
    len 1 sub -1 0 {
        arr exch get
        % a /res [      --->     /res [ a
        /res  [ 3 2 roll res ] def
    } for
} def
%---
%params: dict, key, value
% key associated with list of values
/addListToDict{
    /value exch def
    /key exch def
    /cDict exch def
    cDict key known
    {       cDict cDict key get /value load addToList put }
    {        cDict key [/value load  []] put    }
    ifelse
} def
%-------params------------
%----children   :   array
%----flag       :   boolean
%    return     :   void
%--------------------------
/setFixedForChildren{
    1 dict begin
    /flag exch def
    /children exch def

    {
         children length 0 eq
         {exit}
         {
            /elem gelements children head get def
            elem /isFixed flag put
            elem /children get flag setFixedForChildren
            /children children tail def
         } ifelse
    } loop
    end
} def


%--- param: gelement
/setFocusedElement {

    /nElem exch def
    nElem /inFocus get not
         {
          /oElem gelements /focusedElement get def
          oElem /inFocus false put
          oElem /isOpened known
          {oElem /isOpened false put} if
          nElem /inFocus true put
          gelements /focusedElement nElem put
         } if
} def

/dragElement{

    gelements /mouseY get /mouseY exch def
    gelements /mouseX get /mouseX exch def

    gelements /resizingElement get /resizingElement exch def
    resizingElement null eq not
    {
        /num resizingElement /resize get def
        /par resizingElement /parent get def

        /res1{
            resizingElement /w mouseX resizingElement /x get sub put
            resizingElement /rW resizingElement /w get resizingElement /parent get /w get div put
        } def
        /res3{
            /yHigh resizingElement /y get resizingElement /h get add def

            resizingElement /y mouseY put
            resizingElement /h yHigh resizingElement /y get sub put

            resizingElement /rY resizingElement /y get par /y get sub par /h get div put
            resizingElement /rH resizingElement /h get par /h get div put
        } def
        /res5{
            /xRight resizingElement /x get resizingElement /w get add def

            resizingElement /x mouseX put
            resizingElement /w xRight resizingElement /x get sub put

            resizingElement /rX resizingElement /x get par /x get sub par /w get div put
            resizingElement /rW resizingElement /w get par /w get div put
        } def
        /res7{
            resizingElement /h mouseY resizingElement /y get sub put
            resizingElement /rH resizingElement /h get resizingElement /parent get /h get div put
        } def

        num 1 eq { res1 } if
        num 3 eq { res3 } if
        num 5 eq { res5 } if
        num 7 eq { res7 } if

        num 2 eq { res1 res3 } if
        num 4 eq { res3 res5 } if
        num 6 eq { res5 res7 } if
        num 8 eq { res7 res1 } if
        repaintAll
    }
    if

    gelements /draggedElement get  /draggedElement exch def
    draggedElement null eq
    { exit }
    if


                       gelements /lastY get /lastY exch def
                       gelements /lastX get /lastX exch def

                       draggedElement /x draggedElement /x get mouseX lastX sub add put
                       draggedElement /y draggedElement /y get mouseY lastY sub add put

                       gelements /lastX mouseX put
                       gelements /lastY mouseY put

                       repaintAll
} def

%END_PROLOG

/gelements 1 dict def
gelements /maxElementNumber 0 put
/scene initScene def
gelements /focusedElement scene put
gelements /mouseX 0 put
gelements /mouseY 0 put

gelements /draggedElement null put
gelements /resizingElement null put
gelements /lastX 0 put
gelements /lastY 0 put


