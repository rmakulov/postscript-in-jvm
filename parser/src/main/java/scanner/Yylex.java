/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package scanner;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>G:/Programming/Decompiler/postscript-in-jvm/parser/src/main/java/scanner/ps.flex</tt>
 */
class Yylex {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;
    private static final String ZZ_NL = System.getProperty("line.separator");

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int COMMENT = 2;
    public static final int YYSTRING = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2
    };

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = {
            0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 6, 0, 9, 7, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            8, 0, 0, 18, 0, 5, 23, 0, 25, 4, 21, 19, 0, 20, 0, 10,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 15, 22, 16, 0,
            0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 3, 12, 0, 0,
            0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 24, 14, 17, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    };

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7" +
                    "\1\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16" +
                    "\1\17\1\20\1\21\1\22\1\23\1\24\1\1\1\7" +
                    "\1\25\1\2\1\26\1\27\1\3\1\7\1\30\1\0" +
                    "\1\31\1\32\1\0\1\33\1\16\1\34\1\35\1\0" +
                    "\1\36";

    private static int[] zzUnpackAction() {
        int[] result = new int[42];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\32\0\64\0\116\0\150\0\202\0\202\0\234" +
                    "\0\266\0\320\0\202\0\202\0\116\0\116\0\352\0\u0104" +
                    "\0\116\0\116\0\116\0\116\0\116\0\116\0\202\0\u011e" +
                    "\0\u011e\0\202\0\u0138\0\202\0\202\0\u0152\0\202\0\320" +
                    "\0\u016c\0\202\0\202\0\u0186\0\202\0\202\0\202\0\u0152" +
                    "\0\u01a0\0\u0186";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[42];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\4\1\5\1\4\2\6\1\7\1\10\1\11\1\10" +
                    "\1\0\1\12\1\13\1\14\1\15\1\16\1\17\1\20" +
                    "\2\4\1\21\1\22\1\23\1\24\1\25\1\26\1\27" +
                    "\5\30\1\31\1\32\1\11\22\30\4\33\1\34\24\33" +
                    "\1\35\3\4\12\0\2\4\2\0\10\4\1\0\1\4" +
                    "\1\5\1\4\12\0\2\4\2\0\1\4\1\36\6\4" +
                    "\41\0\1\10\1\0\1\10\27\0\1\37\23\0\3\40" +
                    "\12\0\2\40\2\0\10\40\2\0\2\41\14\0\1\42" +
                    "\1\43\1\44\4\0\1\45\23\0\1\46\5\0\1\47" +
                    "\3\0\6\30\2\0\22\30\4\33\1\0\24\33\1\0" +
                    "\1\4\1\50\1\4\12\0\2\4\2\0\10\4\2\0" +
                    "\2\41\15\0\1\43\11\0\4\44\1\0\14\44\1\51" +
                    "\7\44\1\0\4\44\1\0\13\44\1\52\1\51\7\44" +
                    "\1\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[442];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\4\1\2\11\3\1\2\11\12\1\1\11\2\1" +
                    "\1\11\1\1\2\11\1\1\1\11\1\1\1\0\2\11" +
                    "\1\0\3\11\1\1\1\0\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[42];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    private int string_depth = 0;
    private int proc_depth = 0;
    private String curString = "";


    public int getProcDepth() {
        return proc_depth;
    }


    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    Yylex(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    Yylex(java.io.InputStream in) {
        this(new java.io.InputStreamReader
                (in, java.nio.charset.Charset.forName("UTF-8")));
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

    /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p/>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p/>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Yytoken yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                        }
                        break;
                    default:
                        zzR = false;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [106] { return (new Yytoken(45,yytext(),yyline,yychar,yychar+yylength())); }");
                {
                    return (new Yytoken(45, yytext(), yyline, yychar, yychar + yylength()));
                }
                case 31:
                    break;
                case 2:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [121] { String text = yytext();" + ZZ_NL + "                //todo" + ZZ_NL + "                //curString = curString + text.substring(yychar,yychar+yylength());" + ZZ_NL + "                curString = curString + text.substring(0,text.length()); }");
                {
                    String text = yytext();
                    //todo
                    //curString = curString + text.substring(yychar,yychar+yylength());
                    curString = curString + text.substring(0, text.length());
                }
                case 32:
                    break;
                case 3:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [94] { return (new Yytoken(43,yytext(),yyline,yychar,yychar+yylength())); }");
                {
                    return (new Yytoken(43, yytext(), yyline, yychar, yychar + yylength()));
                }
                case 33:
                    break;
                case 4:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [92] { return (new Yytoken(42,yytext(),yyline,yychar,yychar+yylength())); }");
                {
                    return (new Yytoken(42, yytext(), yyline, yychar, yychar + yylength()));
                }
                case 34:
                    break;
                case 5:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [130] { System.out.println(\"Illegal character: <\" + yytext() + \">\");" + ZZ_NL + "\tUtility.error(Utility.E_UNMATCHED); }");
                {
                    System.out.println("Illegal character: <" + yytext() + ">");
                    Utility.error(Utility.E_UNMATCHED);
                }
                case 35:
                    break;
                case 6:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [83] { yybegin(COMMENT); }");
                {
                    yybegin(COMMENT);
                }
                case 36:
                    break;
                case 7:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [81] {  }");
                {
                }
                case 37:
                    break;
                case 8:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [43] { return (new Yytoken(5,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(5, yytext(), yyline, yychar, yychar + 1));
                }
                case 38:
                    break;
                case 9:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [44] { return (new Yytoken(6,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(6, yytext(), yyline, yychar, yychar + 1));
                }
                case 39:
                    break;
                case 10:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [46] { proc_depth++;" + ZZ_NL + "            return (new Yytoken(7,yytext(),yyline,yychar,yychar+1)); }");
                {
                    proc_depth++;
                    return (new Yytoken(7, yytext(), yyline, yychar, yychar + 1));
                }
                case 40:
                    break;
                case 11:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [50] { if (--proc_depth < 0) {" + ZZ_NL + "            System.out.println(\"Error\");" + ZZ_NL + "            System.exit(-1);" + ZZ_NL + "         }" + ZZ_NL + "         return new Yytoken(8,yytext(),yyline,yychar,yychar+1); }");
                {
                    if (--proc_depth < 0) {
                        System.out.println("Error");
                        System.exit(-1);
                    }
                    return new Yytoken(8, yytext(), yyline, yychar, yychar + 1);
                }
                case 41:
                    break;
                case 12:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [73] { return (new Yytoken(16,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(16, yytext(), yyline, yychar, yychar + 1));
                }
                case 42:
                    break;
                case 13:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [75] { return (new Yytoken(18,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(18, yytext(), yyline, yychar, yychar + 1));
                }
                case 43:
                    break;
                case 14:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [68] { return (new Yytoken(10,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(10, yytext(), yyline, yychar, yychar + 1));
                }
                case 44:
                    break;
                case 15:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [69] { return (new Yytoken(11,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(11, yytext(), yyline, yychar, yychar + 1));
                }
                case 45:
                    break;
                case 16:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [70] { return (new Yytoken(12,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(12, yytext(), yyline, yychar, yychar + 1));
                }
                case 46:
                    break;
                case 17:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [71] { return (new Yytoken(14,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(14, yytext(), yyline, yychar, yychar + 1));
                }
                case 47:
                    break;
                case 18:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [77] { return (new Yytoken(20,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(20, yytext(), yyline, yychar, yychar + 1));
                }
                case 48:
                    break;
                case 19:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [78] { return (new Yytoken(21,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(21, yytext(), yyline, yychar, yychar + 1));
                }
                case 49:
                    break;
                case 20:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [85] { curString =  \"\";" + ZZ_NL + "    string_depth = 1;" + ZZ_NL + "    yybegin(YYSTRING); }");
                {
                    curString = "";
                    string_depth = 1;
                    yybegin(YYSTRING);
                }
                case 50:
                    break;
                case 21:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [105] { yybegin(YYINITIAL); }");
                {
                    yybegin(YYINITIAL);
                }
                case 51:
                    break;
                case 22:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [114] { if (--string_depth == 0) {" + ZZ_NL + "            yybegin(YYINITIAL);" + ZZ_NL + "            return (new Yytoken(46,curString,yyline,0,curString.length()));" + ZZ_NL + "            } else {" + ZZ_NL + "            curString = curString+ \")\";" + ZZ_NL + "         } }");
                {
                    if (--string_depth == 0) {
                        yybegin(YYINITIAL);
                        return (new Yytoken(46, curString, yyline, 0, curString.length()));
                    } else {
                        curString = curString + ")";
                    }
                }
                case 52:
                    break;
                case 23:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [111] { string_depth++;" + ZZ_NL + "       curString = curString + \"(\"; }");
                {
                    string_depth++;
                    curString = curString + "(";
                }
                case 53:
                    break;
                case 24:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [96] { String text =yytext().substring(1);" + ZZ_NL + "          return (new Yytoken(44,text,yyline,yychar+1,yychar+yylength())); }");
                {
                    String text = yytext().substring(1);
                    return (new Yytoken(44, text, yyline, yychar + 1, yychar + yylength()));
                }
                case 54:
                    break;
                case 25:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [57] { return (new Yytoken(9,yytext(),yyline,yychar,yychar+1)); }");
                {
                    return (new Yytoken(9, yytext(), yyline, yychar, yychar + 1));
                }
                case 55:
                    break;
                case 26:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [60] { return (new Yytoken(11,yytext(),yyline,yychar+1,yychar+yylength()-1)); }");
                {
                    return (new Yytoken(11, yytext(), yyline, yychar + 1, yychar + yylength() - 1));
                }
                case 56:
                    break;
                case 27:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [74] { return (new Yytoken(17,yytext(),yyline,yychar,yychar+2)); }");
                {
                    return (new Yytoken(17, yytext(), yyline, yychar, yychar + 2));
                }
                case 57:
                    break;
                case 28:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [76] { return (new Yytoken(19,yytext(),yyline,yychar,yychar+2)); }");
                {
                    return (new Yytoken(19, yytext(), yyline, yychar, yychar + 2));
                }
                case 58:
                    break;
                case 29:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [66] { return (new Yytoken(22,yytext(),yyline,yychar,yychar+yylength())); }");
                {
                    return (new Yytoken(22, yytext(), yyline, yychar, yychar + yylength()));
                }
                case 59:
                    break;
                case 30:
                    System.out.println("line: " + (yyline + 1) + " " + "match: --" + yytext() + "--");
                    System.out.println("action [63] { return (new Yytoken(12,yytext(),yyline,yychar+2,yychar+yylength()-2)); }");
                {
                    return (new Yytoken(12, yytext(), yyline, yychar + 2, yychar + yylength() - 2));
                }
                case 60:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

    /**
     * Runs the scanner on input files.
     * <p/>
     * This main method is the debugging routine for the scanner.
     * It prints debugging information about each returned token to
     * System.out until the end of file is reached, or an error occured.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java Yylex [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                Yylex scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new Yylex(reader);
                    do {
                        System.out.println(scanner.yylex());
                    } while (!scanner.zzAtEOF);

                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }


}
